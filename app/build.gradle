/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.7/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    implementation libs.guava

    // Selenium and TestNG dependencies
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '4.27.0'
    testImplementation group: 'org.testng', name: 'testng', version: '7.10.2'

    // WebDriverManager
    implementation group: 'io.github.bonigarcia', name: 'webdrivermanager', version: '5.9.2'

    // Logback for SLF4J
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.4.11'
}

// testing {
//     suites {
//         // Configure the built-in test suite
//         test {

//             // Use TestNG test framework
//             useTestNG('7.5.1')
            
            
//         }
//     }
// }
test {
    useTestNG() {
        useDefaultListeners = true
        //suites "src\\test\\java\\org\\example\\testNG.xml"
       
    }

    afterSuite { desc, result ->
            if (!desc.parent) {
                println "\nTEST RESULT: ${result.resultType}"
                println "TEST SUMMARY: RAN ${result.testCount} TESTS, " +
                        "${result.successfulTestCount} SUCCEEDED, " +
                        "${result.failedTestCount} FAILED, " +
                        "${result.skippedTestCount} SKIPPED"
            }
    }

    testLogging {
		events "PASSED", "SKIPPED", "FAILED", "STANDARD_OUT", "STANDARD_ERROR"
        exceptionFormat = 'full'

        // Optionally do:
        showStackTraces = true
	}

    testLogging.showStandardStreams = true
    test.outputs.upToDateWhen {false}


tasks.named('test') {
    // Use TestNG for unit tests.
    useTestNG()
}
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'org.example.App'
}
